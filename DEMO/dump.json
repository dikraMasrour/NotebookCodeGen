{"cells": [{"cell_type": "code", "execution_count": 1, "metadata": {}, "outputs": [], "source": ["import pandas as pd\n", "import numpy as np"]}, {"cell_type": "code", "execution_count": 2, "metadata": {}, "outputs": [], "source": ["DATA_PATH = \"../data/cleaned_ntb_only_en_scd.pkl\""]}, {"cell_type": "code", "execution_count": 3, "metadata": {}, "outputs": [{"data": {"text/html": ["<div>\n", "<style scoped>\n", "    .dataframe tbody tr th:only-of-type {\n", "        vertical-align: middle;\n", "    }\n", "\n", "    .dataframe tbody tr th {\n", "        vertical-align: top;\n", "    }\n", "\n", "    .dataframe thead th {\n", "        text-align: right;\n", "    }\n", "</style>\n", "<table border=\"1\" class=\"dataframe\">\n", "  <thead>\n", "    <tr style=\"text-align: right;\">\n", "      <th></th>\n", "      <th>cell-type</th>\n", "      <th>source</th>\n", "      <th>title</th>\n", "      <th>tag</th>\n", "    </tr>\n", "  </thead>\n", "  <tbody>\n", "    <tr>\n", "      <th>0</th>\n", "      <td>code</td>\n", "      <td>import pandas as pd import numpy as np import ...</td>\n", "      <td>0-9-try-better-parameters-better-score.ipynb</td>\n", "      <td>regression</td>\n", "    </tr>\n", "    <tr>\n", "      <th>1</th>\n", "      <td>markdown</td>\n", "      <td>try to overfit more pls upvote if you fork lik...</td>\n", "      <td>0-9-try-better-parameters-better-score.ipynb</td>\n", "      <td>regression</td>\n", "    </tr>\n", "    <tr>\n", "      <th>2</th>\n", "      <td>markdown</td>\n", "      <td>sub1 0 869</td>\n", "      <td>0-9-try-better-parameters-better-score.ipynb</td>\n", "      <td>regression</td>\n", "    </tr>\n", "    <tr>\n", "      <th>3</th>\n", "      <td>markdown</td>\n", "      <td>credit very simple code with score 0 886 by ay...</td>\n", "      <td>0-9-try-better-parameters-better-score.ipynb</td>\n", "      <td>regression</td>\n", "    </tr>\n", "    <tr>\n", "      <th>4</th>\n", "      <td>code</td>\n", "      <td>import pandas as pd import numpy as np from sk...</td>\n", "      <td>0-9-try-better-parameters-better-score.ipynb</td>\n", "      <td>regression</td>\n", "    </tr>\n", "    <tr>\n", "      <th>...</th>\n", "      <td>...</td>\n", "      <td>...</td>\n", "      <td>...</td>\n", "      <td>...</td>\n", "    </tr>\n", "    <tr>\n", "      <th>344966</th>\n", "      <td>code</td>\n", "      <td>POI_data = gpd.read_file(\"../input/geospatial...</td>\n", "      <td>your-first-map.ipynb</td>\n", "      <td>reinforcement learning</td>\n", "    </tr>\n", "    <tr>\n", "      <th>344967</th>\n", "      <td>markdown</td>\n", "      <td>next we create a map from all four geodatafram...</td>\n", "      <td>your-first-map.ipynb</td>\n", "      <td>reinforcement learning</td>\n", "    </tr>\n", "    <tr>\n", "      <th>344968</th>\n", "      <td>code</td>\n", "      <td>ax = counties.plot(figsize=(10,10), color='no...</td>\n", "      <td>your-first-map.ipynb</td>\n", "      <td>reinforcement learning</td>\n", "    </tr>\n", "    <tr>\n", "      <th>344969</th>\n", "      <td>markdown</td>\n", "      <td>it looks like the northeastern part of the sta...</td>\n", "      <td>your-first-map.ipynb</td>\n", "      <td>reinforcement learning</td>\n", "    </tr>\n", "    <tr>\n", "      <th>344970</th>\n", "      <td>markdown</td>\n", "      <td>have questions or comments visit the course di...</td>\n", "      <td>your-first-map.ipynb</td>\n", "      <td>reinforcement learning</td>\n", "    </tr>\n", "  </tbody>\n", "</table>\n", "<p>332605 rows \u00d7 4 columns</p>\n", "</div>"], "text/plain": ["       cell-type                                             source  \\\n", "0           code  import pandas as pd import numpy as np import ...   \n", "1       markdown  try to overfit more pls upvote if you fork lik...   \n", "2       markdown                                         sub1 0 869   \n", "3       markdown  credit very simple code with score 0 886 by ay...   \n", "4           code  import pandas as pd import numpy as np from sk...   \n", "...          ...                                                ...   \n", "344966      code   POI_data = gpd.read_file(\"../input/geospatial...   \n", "344967  markdown  next we create a map from all four geodatafram...   \n", "344968      code   ax = counties.plot(figsize=(10,10), color='no...   \n", "344969  markdown  it looks like the northeastern part of the sta...   \n", "344970  markdown  have questions or comments visit the course di...   \n", "\n", "                                               title                     tag  \n", "0       0-9-try-better-parameters-better-score.ipynb              regression  \n", "1       0-9-try-better-parameters-better-score.ipynb              regression  \n", "2       0-9-try-better-parameters-better-score.ipynb              regression  \n", "3       0-9-try-better-parameters-better-score.ipynb              regression  \n", "4       0-9-try-better-parameters-better-score.ipynb              regression  \n", "...                                              ...                     ...  \n", "344966                          your-first-map.ipynb  reinforcement learning  \n", "344967                          your-first-map.ipynb  reinforcement learning  \n", "344968                          your-first-map.ipynb  reinforcement learning  \n", "344969                          your-first-map.ipynb  reinforcement learning  \n", "344970                          your-first-map.ipynb  reinforcement learning  \n", "\n", "[332605 rows x 4 columns]"]}, "execution_count": 3, "metadata": {}, "output_type": "execute_result"}], "source": ["df = pd.read_pickle(DATA_PATH)\n", "df"]}, {"cell_type": "code", "execution_count": 4, "metadata": {}, "outputs": [], "source": ["for i in df.columns:\n", "    df[i].fillna(' ', inplace=True)"]}, {"cell_type": "code", "execution_count": 5, "metadata": {}, "outputs": [{"name": "stdout", "output_type": "stream", "text": ["<class 'pandas.core.frame.DataFrame'>\n", "Int64Index: 332605 entries, 0 to 344970\n", "Data columns (total 4 columns):\n", " #   Column     Non-Null Count   Dtype \n", "---  ------     --------------   ----- \n", " 0   cell-type  332605 non-null  object\n", " 1   source     332605 non-null  object\n", " 2   title      332605 non-null  object\n", " 3   tag        332605 non-null  object\n", "dtypes: object(4)\n", "memory usage: 12.7+ MB\n"]}], "source": ["df.info()"]}, {"cell_type": "code", "execution_count": 6, "metadata": {}, "outputs": [{"data": {"text/html": ["<div>\n", "<style scoped>\n", "    .dataframe tbody tr th:only-of-type {\n", "        vertical-align: middle;\n", "    }\n", "\n", "    .dataframe tbody tr th {\n", "        vertical-align: top;\n", "    }\n", "\n", "    .dataframe thead th {\n", "        text-align: right;\n", "    }\n", "</style>\n", "<table border=\"1\" class=\"dataframe\">\n", "  <thead>\n", "    <tr style=\"text-align: right;\">\n", "      <th></th>\n", "      <th>md_pair</th>\n", "      <th>cd_pair</th>\n", "      <th>title</th>\n", "      <th>tag</th>\n", "    </tr>\n", "  </thead>\n", "  <tbody>\n", "  </tbody>\n", "</table>\n", "</div>"], "text/plain": ["Empty DataFrame\n", "Columns: [md_pair, cd_pair, title, tag]\n", "Index: []"]}, "execution_count": 6, "metadata": {}, "output_type": "execute_result"}], "source": ["df_tansf = pd.DataFrame(columns=['md_pair','cd_pair','title','tag'])\n", "df_tansf"]}, {"cell_type": "code", "execution_count": 7, "metadata": {}, "outputs": [], "source": ["def transf_only_cd_ntb(old_data,new_data,counter):\n", "    for i in old_data.index :\n", "        if (len(str(old_data.loc[i]['source']).split())) < 256 and (len(str(old_data.loc[i]['source']).split())) > 3:\n", "            new_data.loc[len(new_data)] = [\" \",str(old_data.loc[i]['source']),str(old_data.loc[i]['title']),str(old_data.loc[i]['tag'])]\n", "        else:\n", "            counter += 1\n", "    \n", "    return counter"]}, {"cell_type": "code", "execution_count": 8, "metadata": {}, "outputs": [], "source": ["def transf_only_md_ntb(old_data,new_data,counter):\n", "    for i in old_data.index :\n", "        if (len(str(old_data.loc[i]['source']).split())) < 256 and (len(str(old_data.loc[i]['source']).split())) > 3:\n", "            new_data.loc[len(new_data)] = [str(old_data.loc[i]['source']),\" \",str(old_data.loc[i]['title']),str(old_data.loc[i]['tag'])]\n", "        else:\n", "            counter += 1\n", "    \n", "    return counter"]}, {"cell_type": "code", "execution_count": 24, "metadata": {}, "outputs": [], "source": ["def construct_pairs(old_data,new_data,counter,limit):\n", "    rgp_md = ''\n", "    index = 0 \n", "\n", "    \n", "    try:\n", "        while(str(old_data.iloc[index]['cell-type']) == \"markdown\") and counter < limit:\n", "                rgp_md += str(old_data.iloc[index]['source']) + \" \"\n", "                index +=1 \n", "                \n", "    except Exception as e:\n", "        print('Here 1 :',e,counter+index)\n", "    \n", "    try:\n", "        while(str(old_data.iloc[index]['cell-type']) == \"code\") and counter < limit:\n", "                new_data.loc[len(new_data)] = [rgp_md,str(old_data.iloc[index]['source']),str(old_data.iloc[index]['title']),str(old_data.iloc[index]['tag'])]\n", "                index +=1\n", "    except Exception as e:\n", "        print('Here 2 :',e,counter+index)\n", "\n", "    counter += index\n", "\n", "    if counter < limit :\n", "                        print(counter)\n", "                        construct_pairs(old_data.loc[counter:],new_data,counter,limit)    \n", "\n", "\n"]}, {"cell_type": "code", "execution_count": 10, "metadata": {}, "outputs": [], "source": ["def transf_ntb(old_data,new_data):\n", "    if old_data.iloc[0]['cell-type'] == \"code\":\n", "        new_data.loc[len(new_data)] = [\" \",str(old_data.loc[0]['source']),str(old_data.loc[0]['title']),str(old_data.loc[0]['tag'])]\n", "        transf_ntb(old_data[1:],new_data)\n", "    else :\n", "        old_data = old_data.reset_index(drop=True)\n", "        construct_pairs(old_data,new_data,0,len(old_data))"]}, {"cell_type": "code", "execution_count": 11, "metadata": {}, "outputs": [{"data": {"text/plain": ["'\\nList_1 = []\\nList_2 = []\\ncounter_1 = 0\\ncounter_2 = 0\\nfull_text_md = \\'\\'\\nfull_text_cd = \\'\\'\\ngroups = df.groupby(\\'title\\')\\nList_ntb = np.unique(df[\\'title\\'].tolist()).tolist()\\nfor ntb in List_ntb :\\n    data_ntb = df[df[\\'title\\'] == ntb] \\n    for i in data_ntb.index:\\n            if data_ntb.loc[i][\\'cell-type\\'] == \"markdown\":\\n                full_text_md += str(data_ntb.loc[i][\\'source\\'])\\n            else :\\n                full_text_cd += str(data_ntb.loc[i][\\'source\\'])\\n    \\n    if full_text_md == \\'\\' :\\n        full_text_md = \\'\\'\\n        full_text_cd = \\'\\'\\n        counter_1 += transf_only_cd_ntb(data_ntb,df_tansf,counter_1)\\n        List_1 .append(ntb)\\n\\n    elif full_text_cd == \\'\\':\\n        full_text_md = \\'\\'\\n        full_text_cd = \\'\\'\\n        counter_2 += transf_only_md_ntb(data_ntb,df_tansf,counter_2)\\n        List_2 .append(ntb)\\n\\n    else :\\n        full_text_md = full_text_cd = \\'\\'\\n\\n'"]}, "execution_count": 11, "metadata": {}, "output_type": "execute_result"}], "source": ["List_1 = []\n", "List_2 = []\n", "counter_1 = 0\n", "counter_2 = 0\n", "full_text_md = ''\n", "full_text_cd = ''\n", "groups = df.groupby('title')\n", "List_ntb = np.unique(df['title'].tolist()).tolist()\n", "for ntb in List_ntb :\n", "    data_ntb = df[df['title'] == ntb] \n", "    for i in data_ntb.index:\n", "            if data_ntb.loc[i]['cell-type'] == \"markdown\":\n", "                full_text_md += str(data_ntb.loc[i]['source'])\n", "            else :\n", "                full_text_cd += str(data_ntb.loc[i]['source'])\n", "    \n", "    if full_text_md == '' :\n", "        full_text_md = ''\n", "        full_text_cd = ''\n", "        counter_1 += transf_only_cd_ntb(data_ntb,df_tansf,counter_1)\n", "        List_1 .append(ntb)\n", "\n", "    elif full_text_cd == '':\n", "        full_text_md = ''\n", "        full_text_cd = ''\n", "        counter_2 += transf_only_md_ntb(data_ntb,df_tansf,counter_2)\n", "        List_2 .append(ntb)\n", "\n", "    else :\n", "        full_text_md = full_text_cd = ''\n", "\n"]}, {"cell_type": "code", "execution_count": 12, "metadata": {}, "outputs": [], "source": ["List_1"]}, {"cell_type": "code", "execution_count": 13, "metadata": {}, "outputs": [], "source": ["List_2"]}], "metadata": {"kernelspec": {"display_name": "Python 3.10.6 64-bit", "language": "python", "name": "python3"}, "language_info": {"codemirror_mode": {"name": "ipython", "version": 3}, "file_extension": ".py", "mimetype": "text/x-python", "name": "python", "nbconvert_exporter": "python", "pygments_lexer": "ipython3", "version": "3.10.6"}, "orig_nbformat": 4, "vscode": {"interpreter": {"hash": "5093ef3c9eba5a2350b58945b72c1f122b8b5551b9ae00db57837a16e1175c4c"}}}, "nbformat": 4, "nbformat_minor": 2}